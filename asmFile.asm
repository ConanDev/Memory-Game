	title	"Memory Game"
	list	p=16f84A
	radix	hex
	include	"p16f84A.inc"


COUNT1	 EQU	d'12'  ;register to hold the values and delays counts
COUNT2	 EQU	d'13'
COUNT3	 EQU	d'14'
COUNT4	 EQU	d'15'
COUNT5	 EQU	d'16'
COUNT6	 EQU	d'17'
COUNT7   EQU 	d'18'

HIGHER   EQU 	d'19'  ;Register that hold the values of the upper bits of Letters A->F
CUR  	 EQU 	D'20'
STATES   EQU 	D'21'

LC1		 EQU 	D'22' ;The stored values of the lower bits of THE FIRST FIRST ROW
LA1      EQU    D'23'
LE1      EQU 	D'24'
LF1      EQU    D'25'
LB1      EQU 	D'26'
LD1      EQU 	D'27'
LB2		 EQU 	D'28' ;The stored values of the lower bits of the letters OF THE SECOND ROW
LD2      EQU 	d'29'
LF2      EQU 	d'30'
LC2      EQU 	D'31'
LA2      EQU 	D'32'
LE2      EQU 	D'33'

COUNT8	 EQU	D'34'
COUNT9   EQU 	D'35'

CUROLD   EQU    D'36'
TEMP	 EQU    D'37'

INDR1    EQU    D'38'
INDR2    EQU    D'39'

HOLD1	 EQU    D'40'
HOLD2	 EQU 	D'41'
CARD1    EQU	D'42'
CARD2	 EQU    D'43'
DEST	 EQU	D'44'	
CURMODE  EQU    D'45'
HIT		 EQU    D'46'		
MISS	 EQU	D'47'
ENDR	 EQU    D'48'
BAR		 EQU	D'49'
HOLDER	 EQU	D'50'
THOLD	 EQU    D'51'
TIMER	 EQU	D'52'
REVEAL	 EQU	D'53'
SCORE	 EQU	D'54'
MATCHED	 EQU	D'55'
HOLDING	 EQU	D'56'

		ORG		 0x0
		GOTO 	 MAIN

		ORG 	 0x04
 		
		BTFSC 	 INTCON,RBIF  ;Interrupts FOR MODE ONLY ON THE PORTB 4 TO 7  
		GOTO  	 RBIN1

		BTFSC    INTCON,T0IF  ;interrupts FOR TIMER WHEN ACTIVATED IN MODE 2
		GOTO	 TMRINT

MAIN	;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\INITIALIZATION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		CLRF	 PORTA   ;Clearing all portA in bank 0
		CLRF	 PORTB   ;Clearing all portB in bank 0

		CLRF     STATES  ;Clearing the register holding the states
		CLRF     CURMODE ;Clearing the register holding the DDram cursor address

		BSF		 STATUS,RP0 ;Switching to bank 1

		CLRF	 TRISA   ;All PORTS A ARE OUTPUTS

		MOVLW    B'11110000' ;SETTING PORTB 4-7 AS INPUTS AND PORTB0-3 AS OUTPUTS
    	MOVWF	 TRISB       ;Setting port B  

		MOVLW	 B'10000111'
		MOVWF	 OPTION_REG
        
		BCF		 STATUS,RP0  ;Switching back to bank 0

		MOVLW    B'10001000' ;Setting the interupts
		MOVWF    INTCON      ;Interrupt configuration regsiter
 	
		MOVLW    B'00010100'  ;Move the higher values into higher part which is common for all letters
		MOVWF    HIGHER 

		MOVLW    B'00000101'  ;initialzing the initial value of the cursor
		MOVWF    CUR                          

LCDINIT  ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\INITIALIZING THE LCD\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ 
     	MOVLW	b'00010'	;INITIALIZATION ROUTINE OF THE LCD 
		CALL	ET

		MOVLW	b'00010'
		CALL	ET
		
		MOVLW	b'01000'
		CALL	ET
	
		MOVLW	b'00000'
		CALL	ET
	
		MOVLW	b'01100'
		CALL	ET
	
		MOVLW	b'00000'
		CALL	ET
	
		MOVLW	b'00001'
		CALL	ET
	
		MOVLW	b'00000'
		CALL	ET
	
		MOVLW	b'00110'
		CALL	ET


TASK    ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Print welcome screen \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		CALL LW_
		CALL LE_
		CALL LL_
		CALL LC_
		CALL LO_
		CALL LM_
		CALL LE_
        
        CALL DELAY2S
		CALL DELAY2S
M1	;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\BOARD INITILIZATION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		CLRF	HIT		;CLEARING THE HIT REGISTER TO START A NEW GAME
		CLRF	MISS	;CLEARING THE MISS REGISTER TO START A NEW GAME
		CLRF    BAR		;CLEARING THE BARMETER
		CALL    CRSROFF	 ;TURNING OFF THE LCD CURSOR AND USING INSTEAD A COSTOMIZED SPECIAL CURSOR	
		
		CLRF	 PORTA   ;Clearing all portA in bank 0
		CLRF	 PORTB   ;Clearing all portB in bank 0

		MOVLW    B'10001000' ;Setting the interupts
		MOVWF    INTCON      ;Interrupt configuration regsiter

		MOVLW    B'00000101'  ;initialzing the initial value of the cursor WHICH IS BEFORE MOD1
		MOVWF    CUR            

		MOVLW B'00010011';SETTING THE VALUES OF A B C D E OF ROW 1 IN CONSECUTIVE ORDER	IN MEMORY   
		MOVWF LC1

		MOVLW B'00010001'					;	THOSE REPRESENT THE DEFAULT BOARD	|C | A |E | F| B |D |
		MOVWF LA1							;										|B | D |F | C| A | E|		 

		MOVLW B'00010101'
		MOVWF LE1

		MOVLW B'00010110'
		MOVWF LF1

		MOVLW B'00010010'
		MOVWF LB1

		MOVLW B'00010100'
		MOVWF LD1

		MOVLW B'00010010';SETTING THE VALUES OF A B C D E OF ROW 2 IN CONSECUTIVE ORDER IN MEMORY
		MOVWF LB2

		MOVLW B'00010100'
		MOVWF LD2

		MOVLW B'00010110'
		MOVWF LF2

		MOVLW B'00010011'
		MOVWF LC2

		MOVLW B'00010001'
		MOVWF LA2

		MOVLW B'00010101'
		MOVWF LE2

    	;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\CHOOSE MODES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    	CALL CLEAR   ;CLEAR THE SCREEN AFTER JUMPING TO MODES WELCOME SCREEN

		CALL LM_     ;PRINTING THE MODES SCREEN
		CALL LO_
		CALL LD_
		CALL LE_
		 
   		BSF		STATES , 0    ;STATE REGISTER WILL HOLD THE VALUE OF 1 IN THE LSB TO INDICATE THE PRESENCE IN HOME PAGE
			
		MOVLW	b'01000' ;jump to position 1
		CALL	ET
	
		MOVLW	b'00110' ;jump
		CALL	ET
		
		CALL    N1

		MOVLW	b'01000' ;jump to position of number 2
		CALL	ET
	
		MOVLW	b'01001' ;jump
		CALL	ET

		CALL    N2

		MOVLW	b'01000' ;JUMP TO POSITION OF NUMBER 3
		CALL	ET
	
		MOVLW	b'01100' ;JUMP
		CALL	ET

		CALL    N3
			

MODES	MOVLW	b'01000' ;JUMP TO CURSOR POSITION 
		CALL	ET
	
		MOVF	CUR,W      ;MOVE THE VALUE IN THE CURSOR INTO THE CUROLD AND JUMP TO THE NEW POSITION    		
		MOVWF   CUROLD   
		CALL	ET
		
		CALL    LSTAR_
		
		MOVLW	b'01000' 	;JUMP TO CURSOR POSITION
		CALL	ET
		
		MOVF    CUROLD,W	;CLEARING THE OLD POSITION BEFORE GOING TO THE NEW POSITION   
		CALL	ET

		CALL    BLINK      
		BTFSS   STATES , 0	;CHECK IF THE STATES BIT 0 IS STILL SET IF NOT GO TO THE GAME MODE X (1 OR 2 OR 3)	
		GOTO    CONFIRM  
    
		GOTO    MODES
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\TRANSITION FROM MAIN TO MODES BY CONFIRM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\	
CONFIRM	
		BCF   STATES , 0	;RE CLEAR THE STATES REGISTER TO INDICATE WE LEFT THE MODES PAGE

		BTFSS CUR , 3		;CHECK THE CURSOR POSITION TO IDENTIFY WHICH MODE OF THE GAME WE WILL PLAY
		GOTO  MODE1

		BTFSS CUR , 0
		GOTO  MODE2

		BTFSC CUR , 1
		GOTO  MODE3

		RETURN
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\MODE1 INITIAL SCREEN\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
MODE1	;PRINTING THE HOME SCREEN OF MODE 1 WITH THE S_ _ _ _ _ _ W BARMETER
		CALL CLEAR
		BSF	 STATES,1
	
		CALL TR1		;TRAVERS THE FIRST ROW OF THE CARD
		CALL BLINK		;JUMP TWO POSITION IN BLANK MANNER
		CALL BLINK

		CALL LS_
		
		CALL DASH
		CALL DASH
		CALL DASH
		CALL DASH
		CALL DASH
		CALL DASH
	
		CALL LW_
		
		CALL JUMPNL		;JUMP TO THE NEXT LINE
		CALL TR2		;TRAVERSE THE SECOND SET OF CARDS

		CALL CURSOR		;TURNING ON THE CURSOR AND STARTING
		CALL START
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\MODE 1 GAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
M		GOTO M			;GOTO THE INFINITE LOOP	
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\MODE2 INITIAL SCREEN\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
MODE2	;PRINTING THE HOME SCREEN OF MODE 2 WITH THE REM TXX TIME

		MOVLW	B'00011001'
		MOVWF	TIMER
		
		CLRF	THOLD

    	CALL CLEAR
		
		BSF	 STATES,2
		
		CALL TR1		;TRAVERS THE FIRST ROW OF THE CARD
		CALL BLINK		;JUMP TWO POSITION IN BLANK MANNER
		CALL BLINK

		CALL LR_
		CALL LE_
		CALL LM_
		CALL BLINK
		CALL LT_
		
		MOVF TIMER,W
		MOVWF HOLDING
		CALL TIMNUM
		
		CALL N0
		CALL JUMPNL		;JUMP TO THE NEXT LINE
		CALL TR2		;TRAVERSE THE SECOND SET OF CARDS

		CALl CURSOR		;TURNING ON THE CURSOR AND STARTING
		BSF	 INTCON,5
		CALL START
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\MODE 2 GAME\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
MOD2	GOTO MOD2		;GOTO THE INFINITE LOOP	
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\MODE 3 INITIALIZE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
MODE3	;PRINTING THE HOMSCREEN (INITIAL) OF MODE3
		CLRF REVEAL
		CLRF MATCHED
		MOVLW D'13'
		MOVWF SCORE
	
    	CALL CLEAR
		
		BSF	 STATES,3
		
C1		CALL CRSROFF
		CALL TR1		;TRAVERS THE FIRST ROW OF THE CARD
		CALL BLINK		;JUMP TWO POSITION IN BLANK MANNER
		CALL BLINK

		CALL LMINUS
			
		MOVF REVEAL,W
		MOVWF HOLDING
		CALL TIMNUM
		
		CALL BLINK
		
		CALL LPLUS
			
		MOVF MATCHED,W
		MOVWF HOLDING
		CALL TIMNUM
		
		CALL JUMPNL		;JUMP TO THE NEXT LINE
		CALL TR2		;TRAVERSE THE SECOND SET OF CARDS

		CALl CURSOR		;TURNING ON THE CURSOR AND STARTING
		CALL BLINK
		CALL BLINK

		CALL LS_
		CALL LC_
		CALL LO_
		CALL LR_
		CALL LE_
		
		CALL BLINK
			
		MOVF SCORE,W
		MOVWF HOLDING
		CALL TIMNUM

		CALL START
		BTFSC STATES,5
		GOTO  C2	
		BTFSC STATES,4
		GOTO  C3
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\CREATE INFINITE LOOP FOR MODE2 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
M3		GOTO	M3     		
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\DELAYS FUNCTIONS AND TOGGLES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\		
STAR	MOVF  CUR,W	;MOVING THE CURSOR IN THE MODES PAGE THIS IS DONE THROUGH OF CYCLES 5->8->11
		BTFSC CUR,1 ;IF THE BIT IS CLEAR 0101 1000 1011	HENCE AS NOTED IF BIT 1 IS 1 WE GO TO SPECIAL WERE WE GO BACK TO POSITION 5
		GOTO SPECIAL
		ADDLW B'00000011'
		MOVWF CUR	;INCREMENT THEN WE GO MOVE TO CUR
		RETURN

SPECIAL MOVLW B'00000101'	;IF 11 SET BACK TO POSITION 5
		MOVWF CUR			;HENCE WE NOW MOVE THE VALUE INTO CUR
		RETURN	
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\CONFIRM PUSH TOGGLES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\		 
CNPUSH	BTFSS	STATES,7	;WE NEED TO CHECK IF ITS THE FIRST CARD OR THE SECOND CARD
		GOTO    FIRST		;IF BIT  8 OF STATES REGISTER IS ZERO WE GOT NONE( IE: FIRST CARD)
		
		BTFSC	STATES,7    ;IF BIT  8 OF STATES REGISTER IS ONE WE GOT ONE (IE:SECOND CARD)
		GOTO    SECOND
		
	    GOTO    _CNPUSH		;ELSE WE GO TO CNPUSH

FIRST	CALL    OPEN		;WE OPEN THE FIRST CARD

		BSF		STATES,7	;WE SET BIT 7 TO INDICATE WE OPENED ONE CARD
		GOTO    _CNPUSH		;WE FINISH 

SECOND	BCF		STATES,6
		CALL    OPEN		;WE OPEN THE SECOND CARD
		BTFSC	STATES,6	;WE CHECK IF IT IS THE SAME CARD OR NO
		GOTO    _CNPUSH		;IF IT IS WE GO TO THE END 
		BCF		STATES,7	;WE INDICATE THAT WE TOOK TWO CARDS (IE: WE ARE BACK TO ZERO TO GET THE FIRST PAIR AGAIN IN THE NEXT PUSH)
		
MATCH	MOVF	HOLD1,W		;CHECK IF THE TWO CARDS ARE MATCHING
		MOVWF	FSR			

		MOVF	INDF,W
		MOVWF	CARD1		;ACCESS THE VALUE OF CARD1
		
    	MOVF	HOLD2,W		
		MOVWF	FSR
	
		MOVF	INDF,W
		MOVWF	CARD2		;PUT THE VALUE IN THE VALUE OF CARD2
		
		BCF		CARD2,5
		BCF		CARD1,5	
	
		MOVF	CARD2,W
		SUBWF	CARD1
		BTFSC   STATUS,2	;IF THE RESULT IS ZERO HENCE A PERFECT MATCH
		GOTO    MATCHER		;WE GO TO MATCHER
		GOTO    UNMATCHER	;ELSE WE GO TO UNMATCHER
		GOTO	_CNPUSH

MATCHER	INCF	HIT,F	;IT WILL INCREMENT THE VALUE OF THE HITS
		INCF	MATCHED,F
		INCF	SCORE,F

		BTFSC	SCORE,4		;FOR PRINTING PURPOSES USING TIMNUM
		BSF	    SCORE,5
		
		BTFSC	STATES,3	;IN CASE MODE3	WE GO TO MODEL3
		GOTO	MODEL3	
		CALL    BUZZ	;CALL BUZZ TO SHOW A HIT
		BTFSS	HIT,2	;IF 6 HITS WE LEAVE THE GAME ELSE WE REPEAT THE PROCESS AND GO BACK TO CNPUSH
		GOTO    _CNPUSH	
		BTFSS	HIT,1
		GOTO	_CNPUSH
		GOTO    ENDER	 ;IF 6 WE GO TO ENDER

UNMATCHER 
		INCF    MISS,F	;IF MISS INCREMENT THE MISS REGISTER
		BSF		PORTB,2	;TURN ON THE RED LED TO INDICATE A MISS
		CALL    DELAY2S
		BCF		PORTB,2	 ;TURN OF LED 
		
		MOVF    HOLD1,W	;WE CLEAR THE FLAG TO CLOSE THE TWO CARDS
		MOVWF	FSR
		BCF		INDF,7
		
		BTFSC	STATES,3
		CALL	HOLDCHECK
		
		MOVF	HOLD2,W
		MOVWF	FSR
		BCF		INDF,7
		
		BTFSC	STATES,3
		CALL	HOLDCHECK

		BTFSC	STATES,1
		GOTO    MODEL1
		BTFSC	STATES,2
		GOTO	MODEL2
		BTFSC	STATES,3
		GOTO	MODEL3

MODEL1	CALL    BARMETER	;WE CALL BARMETER TO INCREMENT BASED ON THE RANGE
		CALL    START
		CALL	CRSROFF
		CALL    TR1			;WE TRAVERSE THE SET OF CARDS OF ROW 1 
		CALL	JUMPNL
		CALL    TR2			;WE TRAVERSE THE SET OF CARDS OF ROW 2
		CALL	CURSOR
		GOTO   _CNPUSH		

MODEL2	CALL 	START
		CALL	CRSROFF	
		CALL	TR1
		CALL	JUMPNL
		CALL	TR2
		CALL	CURSOR
		GOTO	_CNPUSH

MODEL3	BSF		STATES,5
		GOTO	C1
		
C2		CALL	START
		CALL	CURSOR
		BTFSS	MATCHED,2	;IF 6 HITS WE LEAVE THE GAME ELSE WE REPEAT THE PROCESS AND GO BACK TO CNPUSH
		GOTO	_CNPUSH
		BTFSS	MATCHED,1
		GOTO	_CNPUSH
		GOTO	ENDER	
		GOTO	_CNPUSH

ENDER	BTFSC	STATES,1
		GOTO	END1
		BTFSC	STATES,2
		GOTO	END2
		BTFSC	STATES,3
		GOTO	END3

END1	CALL	CRSROFF
		MOVLW	D'5'		;WE END THE GAME
		SUBWF	MISS,0		;BUT BEFORE WE PRINT THE STANDING OF THE PLAYER 
		MOVWF	ENDR		;PRINT STRONG

		BTFSC	ENDR,7		
		GOTO	STRONG
		
		CLRF	ENDR		;PRINT AVERAGE
		MOVLW	D'9'
		SUBWF	MISS,0
		MOVWF	ENDR

		BTFSC	ENDR,7		;PRINT WEAK
		GOTO	AVERAGE

		GOTO    WEAK
		GOTO    _CNPUSH

STRONG  MOVLW	b'01100' ;JUMP TO THE PRINTING POSITION
		CALL	ET
	
		MOVLW	b'01001' ;JUMP
		CALL	ET
		
		CALL 	LS_		;PRINT STRONG
		CALL    LT_
		CALL    LR_
		CALL    LO_
		CALL	LN_
		CALL    LG_

		BSF		PORTB,2		;IF STRONG PERFORM A CERTAIN COLOR PATTERN OF GREEN AND RED
		BCF		PORTB,3
		CALL	DELAY40MS

		BCF		PORTB,2
		BSF		PORTB,3
		CALL	DELAY40MS

		BSF		PORTB,2
		BCF		PORTB,3
		CALL	DELAY2S

		BCF		PORTB,2
		BSF		PORTB,3
		CALL	DELAY2S
		
		CLRF	STATES
		BSF		STATES,0 		;SET STATES BIT 0 TO 1 TO GO BACK TO THE MODES PAGE
		GOTO	_CNPUSH

WEAK	MOVLW	b'01100' ;JUMP TO THE PRINTING POSITION
		CALL	ET
	
		MOVLW	b'01001' ;JUMP
		CALL	ET
		
		CALL 	LW_
		CALL    LE_
		CALL    LA_
		CALL    LK_

		BSF		PORTB,2		;MAKE A RED LED ON FOR WEAK 
		CALL    DELAY2S
		CALL    DELAY2S
		BCF		PORTB,2

		CLRF    STATES
		BSF		STATES,0
		GOTO	_CNPUSH

AVERAGE	MOVLW	b'01100' ;JUMP TO THE PRINTING POSITION
		CALL	ET
	
		MOVLW	b'01001' ;JUMP
		CALL	ET
		
		CALL 	LA_
		CALL    LV_
		CALL    LE_
		CALL    LR_
		CALL    LA_
		CALL    LG_
		CALL    LE_

		BSF		PORTB,3	;MAKE A GREEN LED ON FOR AVERAGE
		CALL    DELAY2S
		CALL    DELAY2S
		BCF		PORTB,3
		CLRF	STATES   				   			   				   
		BSF		STATES,0
		GOTO	_CNPUSH
_CNPUSH RETURN

END2	CALL	CRSROFF
		BCF     INTCON,5
		MOVLW	B'00010000'
		BTFSS	TIMER,4
		MOVWF	TIMER

		MOVLW	b'01100' ;JUMP TO THE NEXT LINE
		CALL	ET
	
		MOVLW	b'01000' ;JUMP
		CALL	ET

		CALL	LS_
		CALL	LC_
		CALL	LO_	
		CALL	LR_
		CALL	LE_
		
		CALL	BLINK
		
		MOVF	HIT,W
		ADDWF	TIMER,F
		
			
		MOVF    TIMER,W
		MOVWF   HOLDING		
		CALL	TIMNUM

		CALL    DELAY2S
		CALL    DELAY2S
		CLRF	STATES
		BSF		STATES,0
		GOTO	_CNPUSH	

END3	BTFSC   SCORE,7
		INCF	SCORE,F
		CALL    CRSROFF
		CLRF	STATES
		BSF		STATES,4
		GOTO	C1

C3		CALL	DELAY2S
		CALL	DELAY2S
		CLRF	STATES
		BSF		STATES,0
		GOTO	_CNPUSH
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\AUXILARY FUNCTIONS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
OPEN	BTFSS	CURMODE,7	;TEST IF WE ARE IN ROW 1 OR IN ROW 2	
		GOTO     R1

		BTFSC	CURMODE,7
		GOTO	R2
		
		GOTO    _OPEN

R1		MOVF    CURMODE,W    ;MOVE THE VALUE FROM FILE TO WORK
		ADDLW	16         ; ADD THE VALUE OF 16 IN HEX TO CURMODE HENCE IN THIS CASE WE ADD IN 22 IN DECIMAL

		MOVWF	FSR		   ;MOVE THE VALUE ADDRESS IN THE WORK TO FSR AND AFTER THAT

		BTFSS   STATES,7   ;CHECK BIT 7 OF STATES IF FIRST CARD STORE IN HOLD1 ELSE STORE IN HOLD2
		MOVWF	HOLD1
		BTFSC	STATES,7	
		MOVWF	HOLD2

		BTFSC	INDF,7 		;CHECK IF SET CALL ERROR
		GOTO    ERR			;CHECK IF SET CALL ERROR
		BSF		INDF,7	   ;ACCESS THE BIT AND SET BIT 7 AS FLAG AND OPEN THE CARD
		
		CLRF	CURMODE	   ;IN HERE WE ARE CLEARING CURMODE TO GO TO POSITION OF ZERO
		CALL    START	   ;AND TO ENSURE THAT WE ARE CALLING START 	
		CALL	TR1

		CALL    START 		;CALL THE START 
		GOTO   _OPEN

R2		BCF		CURMODE,7	;CLEARING BIT 7 TO BE ABLE TO ADD CURMODE TO FSR 
		MOVF	CURMODE,W
		ADDLW	1C			;MOVE THE VALUE OF 28 AND ADD TO IT CURMODE VALUE WHICH IS IN THE WORK 

		MOVWF	FSR			;MOVING THIS VALUE TO FSR
		
		BTFSS   STATES,7   ;CHECK BIT 7 OF STATES IF FIRST CARD STORE IN HOLD1 ELSE STORE IN HOLD2
		MOVWF	HOLD1
		BTFSC	STATES,7	
		MOVWF	HOLD2

		BTFSC	INDF,7 		;CHECK IF SET CALL ERROR
		GOTO    ERR			;CHECK IF SET CALL ERROR
		BSF		INDF,7		;SETTING BIT 7 OF THIS TO 1 TO INDICATE ITS OPEN

		CLRF	CURMODE		;CLEARING CURMODE
		CALL    JUMPNL      ;JUMPING TO NEXT LINE

		CALL	TR2			;PRINT THE SECOND LINE
		CALL    START 		;CALL START AGAIN
		GOTO    _OPEN

ERR		CALL  BUZZ	
		CALL  START
		BSF	  STATES,6	;SET A FLAG TO INDICATE AN ERROR AND TO RE OPEN A SECOND CARD

_OPEN	RETURN
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\MODE 2 ALGORITHM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
TIMR
		BTFSS   TIMER,4	;WHILE DECREMNTING IF TIMER 1,0000 DECREASED TO LESS THAN THIS NUMBER IE: 0,1111 WE GO TO END 
		GOTO    END2	;GOTO END MODE 2
		INCF    THOLD,F		;ELSE WE INCREMENT THE THOLD AND CHECK IF IT EQUAL TO THE POST SCALER OF 10 SEC
		MOVLW   D'152'
		SUBWF	THOLD,W	    ;WE SUBTARCT IF THEY ARE EQUAAL WE GOTO PERFORM	

		BTFSC	STATUS,2
		GOTO    PERFORM
		
_TIMR	CLRF TMR0
		RETURN

PERFORM	CALL	CRSROFF
		DECF	TIMER,F	 ;WE DECREMENT THE TIMER AND RE WRITE IN THE FILE REGISTER
		MOVLW	b'01000' ;JUMP TO THE POSISTION 14
		CALL	ET
	
		MOVLW	b'01101' ;JUMP TO THE POSITION 14 AND WRITE IN THIS POSITION
		CALL	ET
		
		BTFSS	TIMER,4
		GOTO	_TIMR

		MOVF 	TIMER,W
		MOVWF 	HOLDING
		CALL    TIMNUM	 ;WE CALL TIMNUM WHICH PRINTS THE TIMER NUMBER
		CALL	N0		 ;WE PRINT THE NUMBER 0
		CLRF	THOLD	 ;WE CLEAR THE POST SCALER
		CLRF    TMR0
		CALL	SETDR
		CALL    CURSOR	
		GOTO	_TIMR	 ;WE FINISH THE _TIMR	
			
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\LEFT PUSH TOGGLES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\				
LPUSH   INCF   CURMODE,F	;IMPLEMENT THE LEFT PUSH 
		DECFSZ CURMODE,F	; SINCE DECFSZ DECREMENT THEN CHECK WE CAN CHECK IF THE MODE IS ZERO IF IT IS IN POSITION ZERO BEFORE DECREMENTING
		GOTO   RT 
		CALL   BUZZ			; HENCE IF IT ZERO WE DIRECTLY CALL BUZZ 
		GOTO   RET_

RT		DECF   CURMODE,F
		BTFSC  CURMODE,6	;IF W DECREMENTED AND THE RESULT GAVE 39 WE CALL FIX AND CALL BUZZ
		
		CALL   FIX	
		
RET_	RETURN


FIX     MOVLW   B'10000000'	;IT IS A FUNCTION THAT AIDS THE LEFT BUTTON IN FIXING THE VALUE OF 39	
		MOVWF	CURMODE
		CALL    BUZZ
		RETURN
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\RIGHT PUSH TOGGLES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
RPUSH   BTFSS   CURMODE,2		;IMPLEMENT THE RIGHT PUSH
		GOTO 	INCR			;WE ARE CHECKING CURMODE FOR VALUE OF 5 IN ITS LOWER BITS 
		BTFSS   CURMODE,0		;IF BOTH BIT 2 AND BIT 0 ARE 1 AND RANGE FROM 0->5 WE KNOW ITS 5
		GOTO    INCR			;IF NOT 5 WE CALL INCREMENT
		CALL    BUZZ

		GOTO    R			

INCR	INCF    CURMODE,F 	;INCREMENT THE VALUE IN CURMODE
R		RETURN
		
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\UP DOWN PSUH TOGGLES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
UDPUSH  BTFSS   CURMODE,7   ;IMPLEMENT THE UP-DOWN PUSH
		GOTO    Y1

		BTFSC   CURMODE,7	;WE CHECK THE FLAG IN CURMODE THEN IF ITS 1 WE ARE IN ROW2 ELSE IF ITS 0 WE ARE IN ROW0
		GOTO    Y2

		GOTO	UD_

Y1		BSF     CURMODE,7    ;IF WE ARE IN ROW 0 WE GO TO ROW 1 BY SETTING THE FLAG	
		GOTO    UD_
		
Y2		BCF     CURMODE,7	 ;IF WE ARE IN ROW 1 WE GO TO ROW 0 BY CLEARING THE FLAG
UD_		RETURN		

;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\DELAYS FUNCTIONS AND TOGGLES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\		
SETDR	BTFSS	CURMODE,7	;SET DDRAM ADDRESS TO TOGGLE AND CHANGE THE CURSOR
		GOTO    ROW1
		BTFSC	CURMODE,7
		GOTO	ROW2
		GOTO	SETDR_

ROW1	MOVLW	b'01000';SET DDRAM ADDRESS 
		CALL	ET
	
		MOVF	CURMODE,W
		CALL	ET
		GOTO    SETDR_

ROW2	MOVLW	b'01100';SET DDRAM ADDRESS 
		CALL	ET
	
		MOVF	CURMODE,W
		CALL	ET

SETDR_	RETURN

BARMETER
		BTFSC	MISS,0
		GOTO    PRINTS
		GOTO    _BARMETER
	
PRINTS	BTFSS	BAR,2
		GOTO	CONT
		BTFSS	BAR,1
		GOTO	CONT
		BTFSS	BAR,0
		GOTO	CONT
		GOTO	_BARMETER

CONT	INCF	BAR,F	
		MOVLW	b'01000' ;JUMP TO THE PRINT POSITION
		CALL	ET
	
		MOVLW	b'01001' ;JUMP
		CALL	ET
		MOVF	BAR,W
		MOVWF	HOLDER
		INCF	HOLDER,F

RP		DECFSZ	HOLDER
		GOTO	PRINTER
		GOTO	_BARMETER
		
PRINTER	MOVLW	b'11111' ;PRINT THE SQUARE
		CALL	ET
	
		MOVLW	b'11111' ;PRINT THE SQUARE 
		CALL	ET
		GOTO 	RP  
_BARMETER
		RETURN
		
BUZZ	BSF	PORTB,0	;IMPLEMEMTING THE BUZZ FUNCTION	
		CALL DELAY40MS
		CALL DELAY40MS	
		BCF	PORTB,0
		RETURN

ET		MOVWF	PORTA
		BSF	PORTB,1	;IMPLEMEMNTING THE TOGGLE FOR LCD	
		NOP	
		BCF	PORTB,1

		CALL DELAY1M
		CALL DELAY1M

		RETURN

HOLDCHECK	BTFSS	INDF,5
			GOTO	REV
			INCF	REVEAL,F
			DECF	SCORE,F
			BTFSC	SCORE,7
			GOTO	ENDER
			BTFSC	SCORE,4		;FOR PRINTING PURPOSES USING TIMNUM
			BSF	    SCORE,5
			GOTO	_HOLDCHECK

REV			BSF		INDF,5
_HOLDCHECK	RETURN
			
DELAY1M MOVLW	H'00'	;IMPLEMNTING THE 1 MILLI SECOND DELAY
		MOVWF   COUNT8
		MOVLW	D'76'
		MOVWF	COUNT9

LOOP1	INCFSZ	COUNT8,F
		GOTO    LOOP1

LOOP2	DECFSZ	COUNT9,F
		GOTO	LOOP2

		RETURN 	

DELAY40MS	MOVLW	H'00'	;IMPLEMENTING THE 40 MIILI SECONDS DELAY
		MOVWF	COUNT5
		MOVLW	D'52'
		MOVWF   COUNT4

LOOPDALOOP
		INCFSZ	COUNT5,F
		GOTO	LOOPDALOOP
		DECFSZ	COUNT4,F
		GOTO 	LOOPDALOOP

		RETURN

DELAY2S	MOVLW	H'00'		;IMPLEMNTING THE 2 SECONDS DELAY
		MOVWF   COUNT3
		MOVWF	COUNT2
		MOVLW	D'10'
		MOVWF   COUNT1

LOOP	INCFSZ	COUNT3,F
		GOTO    LOOP
		INCFSZ	COUNT2,F
		GOTO	LOOP

		DECFSZ	COUNT1,F
		GOTO 	LOOP

		RETURN

CURSOR	MOVLW	b'00000'	;IMPLEMENTING THE CURSOR IE: TURN ON THE CURSOR
		CALL	ET
		MOVLW	b'01110'
		CALL	ET
	
		RETURN

CRSROFF	MOVLW	b'00000'	;IMPLEMENTING THE CURSOR IE: TURN OFF THE CURSOR
		CALL	ET
		MOVLW	b'01100'
		CALL	ET
	
		RETURN

CARD	BTFSC	TEMP , 7; CHECK BIT 7 IF CARD IS OPEN OR CLOSED
		GOTO    PRINTC	;IF OPEN PRINT THE CHARACTER
		CALL    SQ		;IF CLOSED PRINT THE SQUARE
		GOTO    RET
	
	
				
PRINTC MOVF 	HIGHER,W	;MOVE THE HIGHER BIT INTO THE REGISTER
	   CALL     ET
		
	   MOVF     TEMP,W    ;MOVE THE LOWER PART THAT IS PRESENT IN TEMP TO PORTA FOR PRINTING
	   MOVWF    PORTA
	   CALL     ET
RET	   RETURN

JUMPNL	MOVLW	b'01100' ;JUMP TO THE NEXT LINE
		CALL	ET
	
		MOVLW	b'00000' ;JUMP
		CALL	ET
		RETURN

TR1		MOVLW	D'7'	;TRAVERSING THE FIRST LINE USING INDIRECT ADDRESSING 
		MOVWF	INDR1
		MOVLW	D'22'
		MOVWF	FSR

T1_		DECFSZ	INDR1,F 
		GOTO	T
		GOTO	F1

T		MOVF	INDF,W	
		MOVWF	TEMP
		CALL    CARD
		INCF	FSR
		GOTO	T1_
F1		RETURN


TR2		MOVLW	D'7' 	;TRAVERSING THE SECOND LINE USING INDIRECT ADDRESSING 
		MOVWF	INDR2
		MOVLW	D'28'
		MOVWF	FSR

T2_		DECFSZ	INDR2,F
		GOTO	T_
		GOTO	F2

T_  	MOVF	INDF,W
		MOVWF	TEMP
		CALL    CARD
		INCF	FSR
		GOTO	T2_
F2		RETURN
		
		
START	MOVLW	b'01000';GOTO THE START 
		CALL	ET
	
		MOVLW	b'00000'
		CALL	ET
		RETURN

	
CLEAR	MOVLW	b'00000';CLEAR DISPLAY 
		CALL	ET
	
		MOVLW	b'00001'
		CALL	ET
		RETURN

TIMNUM	MOVLW	D'10'
		BCF		HOLDING,4

		BTFSC	HOLDING,5
		GOTO	TWODIGIT

		SUBWF	HOLDING,F

		BTFSC	HOLDING,7
		GOTO	DIGIT
		GOTO	TWODIGIT

DIGIT	MOVLW	D'10'
		ADDWF	HOLDING,F
		BSF		HOLDING,4
		
		MOVLW	b'10011'
		CALL	ET

		MOVF	HOLDING,W
		CALL	ET
		
		BTFSC	STATES,3
		CALL	BLINK
		GOTO	_TIMNUM

TWODIGIT
		MOVLW	D'6'
		BTFSC	HOLDING,5
		ADDWF	HOLDING,F

		CALL    N1
		BSF		HOLDING,4
		
		MOVLW	b'10011'
		CALL	ET

		MOVF	HOLDING,W
		CALL	ET
		BCF		HOLDING,5		
_TIMNUM	RETURN
	
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\INTERRUPTS SERVICE ROUTINE\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\	
RBIN1    BTFSS	STATES,0;CHECK WHICH INTERRUPTS CHECKING AND PERFRORM THE DESIRED ACTION BASED ON THE STATES REGISTER
		 GOTO	INTER2
		 GOTO	INTER1	

     
INTER1	CALL DELAY1M

		BTFSS    PORTB,5  ;RIGHT PUSH BUTTON FOR TOGGELING BETWEEN THE MODES			
		CALL     STAR
		
		BTFSS    PORTB,7  ;CONFIRM PUSH BUTTON FOR TO CHOOSE STATES 		
		BCF      STATES , 0 ;CLEARING THE MODES FLAG TO GO THE NEXT STATE

		BCF		 INTCON,RBIF
		GOTO     EINT

INTER2  CALL DELAY1M

		BTFSS  PORTB,4    ;LEFT PUSH BUTTONS
		CALL   LPUSH

		BTFSS  PORTB,5	  ;RIGHT PUSH BUTTON
		CALL   RPUSH
		
		BTFSS  PORTB,6    ;UPDOWN PUSH BUTTON
		CALL   UDPUSH

		CALL    DELAY1M

		BTFSS	PORTB,7		;CONFIRM PUSH BUTTON
		CALL	CNPUSH

		CALL   SETDR	  ;CHANGE THE CURMODE INTO THE NEW ADDRESS

		BCF	   INTCON,RBIF

		BTFSC	STATES,0
		
		GOTO    M1
		
		GOTO   EINT

TMRINT	CALL   TIMR      ;|||||||||||||||||||NEED TO CREATE THE TIMER||||||||||||||||||||||||||||||||||||||||||
		
		BCF	   INTCON,T0IF
		
		CALL    SETDR	  ;CHANGE THE CURMODE INTO THE NEW ADDRESS
		
		BTFSC	STATES,0

		GOTO    M1      
		
EINT	RETFIE	
     	
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\LETTERS TO BE PRINTED\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\	
LW_		MOVLW   b'10101';W
		CALL	ET
		
	
		MOVLW	b'10111';W
		CALL	ET
		RETURN
		
LE_		MOVLW	b'10100';E
		CALL	ET 

	
		MOVLW	b'10101';E
		CALL	ET ;
		RETURN

LL_		MOVLW	b'10100';L
		CALL	ET 

	
		MOVLW	b'11100';L
		CALL	ET 
		RETURN

LC_		MOVLW	b'10100';C
		CALL	ET 

	
		MOVLW	b'10011';C
		CALL	ET 
		RETURN

LO_		MOVLW	b'10100';O
		CALL	ET 

	
		MOVLW	b'11111';O
		CALL	ET 
		RETURN

LM_    	MOVLW	b'10100';M
		CALL	ET 

	
		MOVLW	b'11101';
		CALL	ET 
		RETURN
			

LD_		MOVLW	b'10100';D
		CALL	ET 

		MOVLW	b'10100';D
		CALL	ET
		RETURN
		
LS_		MOVLW	b'10101';S
		CALL	ET

	
		MOVLW	b'10011';S
		CALL	ET
		RETURN

LT_		MOVLW	b'10101';T
		CALL	ET

	
		MOVLW	b'10100';T
		CALL	ET
		RETURN

LR_		MOVLW	b'10101';R
		CALL	ET
	
		MOVLW	b'10010';R
		CALL	ET
		RETURN

LN_		MOVLW	b'10100';N
		CALL	ET

	
		MOVLW	b'11110';N
		CALL	ET
		RETURN	

LG_		MOVLW	b'10100';G
		CALL	ET 

		MOVLW	b'10111';G
		CALL	ET 
		RETURN

		
LA_		MOVLW	b'10100';A
		CALL	ET 

		MOVLW	b'10001';A
		CALL	ET 
		RETURN

LK_		MOVLW	b'10100';K
		CALL	ET 

		MOVLW	b'11011';K
		CALL	ET 
		RETURN

LV_		MOVLW	b'10101';V
		CALL	ET 

		MOVLW	b'10110';V
		CALL	ET 
		RETURN


DASH    MOVLW	b'11010' ;BARMETER DASH
		CALL	ET

	
		MOVLW	b'10011'; BARMETER DASH
		CALL	ET
		RETURN


LSTAR_  MOVLW	b'10010';*
		CALL	ET 

	
		MOVLW	b'11010';*
		CALL	ET 
		RETURN 

LPLUS	MOVLW	b'10010';+
		CALL	ET

		MOVLW	b'11011';+
		CALL	ET
		RETURN

LMINUS	MOVLW	b'10010';-
		CALL	ET

		MOVLW	b'11101';-
		CALL	ET
		RETURN

N0		MOVLW	b'10011';PRINT 0
		CALL	ET 

		MOVLW	b'10000';PRINT 0
		CALL	ET 
		RETURN	
		
N1		MOVLW	b'10011';PRINT 1
		CALL	ET 

		MOVLW	b'10001';PRINT 1
		CALL	ET
		RETURN

N2    	MOVLW	b'10011';PRINT 2
		CALL	ET 

		MOVLW	b'10010';PRINT 2
		CALL	ET 
		RETURN

N3 	    MOVLW	b'10011';PRINT 3
		CALL	ET 

		MOVLW	b'10011';PRINT 3
		CALL	ET 
		RETURN

SQ		MOVLW	b'11101';PRINT SQUARE
		CALL	ET 

		MOVLW	b'11011';PRINT SQUARE
		CALL	ET 
		RETURN

BLINK	MOVLW	b'11010';PRINT SPACE
		CALL	ET 

		MOVLW	b'10000';PRINT SPACE
		CALL	ET 
		RETURN

		END